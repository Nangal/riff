name: CI

on:
  push:
    branches:
    - '**'
    - '!dependabot/**'
  pull_request: {}

jobs:

  unit:
    name: Unit test
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v1
      with:
        go-version: '1.13'
    # TODO remove after https://github.com/actions/setup-go/issues/14
    - name: Add GOPATH/bin to PATH
      run: |
        echo "##[set-env name=GOPATH;]$(go env GOPATH)"
        echo "##[add-path]$(go env GOPATH)/bin"
        mkdir -p $(go env GOPATH)/bin
      shell: bash
    - uses: actions/setup-java@v1
      with:
        java-version: '8.x'
    - name: Test
      run: ./.github/workflows/test.sh
    - name: Report coverage
      run: curl -s https://codecov.io/bash | bash -s
      shell: bash
      env:
        CODECOV_TOKEN: 9ff1715b-5be2-44d7-ae21-b14ff7165fa9
      continue-on-error: true

  stage:
    name: Stage
    if: success() && github.event_name == 'push' && startsWith(github.repository, 'projectriff/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v1
      with:
        go-version: '1.13'
    # TODO remove after https://github.com/actions/setup-go/issues/14
    - name: Add GOPATH/bin to PATH
      run: |
        echo "##[set-env name=GOPATH;]$(go env GOPATH)"
        echo "##[add-path]$(go env GOPATH)/bin"
        mkdir -p $(go env GOPATH)/bin
      shell: bash
    - uses: actions/setup-java@v1
      with:
        java-version: '8.x'
    - name: GCP login
      run: ./fats/install.sh gcloud
      env:
        GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
    - name: docker login
      run: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
      shell: bash
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Stage
      run: ./.github/workflows/stage.sh remote

  pr_acceptance:
    name: PR Acceptance
    needs: unit
    if: success() && github.event_name == 'pull_request'
    strategy:
      matrix:
        config:
        - runtime: core
          gateway: none
        - runtime: knative
          gateway: none
        - runtime: streaming
          gateway: inmemory
        - runtime: streaming
          gateway: kafka
        - runtime: streaming
          gateway: pulsar
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v1
      with:
        go-version: '1.13'
    # TODO remove after https://github.com/actions/setup-go/issues/14
    - name: Add GOPATH/bin to PATH
      run: |
        echo "##[set-env name=GOPATH;]$(go env GOPATH)"
        echo "##[add-path]$(go env GOPATH)/bin"
        mkdir -p $(go env GOPATH)/bin
      shell: bash
    - uses: actions/setup-java@v1
      with:
        java-version: '8.x'
    - name: Stage
      run: ./.github/workflows/stage.sh local
    - name: Setup env
      run: |
        job=$(date +%s) # TODO use something that is assigned by CI to guarantee uniqueness
        echo "JOB_ID=${job}"

        echo "##[set-env name=CLUSTER]kind"
        echo "##[set-env name=REGISTRY]docker-daemon"
        echo "##[set-env name=CLUSTER_NAME]release-${job}-${{ matrix.config.runtime }}-${{ matrix.config.gateway }}"
        echo "##[set-env name=NAMESPACE]release-${job}-${{ matrix.config.runtime }}-${{ matrix.config.gateway }}"
        echo "##[set-env name=RUNTIME]${{ matrix.config.runtime }}"
        echo "##[set-env name=GATEWAY]${{ matrix.config.gateway }}"

        readonly version=$(cat VERSION)
        readonly git_sha=$(git rev-parse HEAD)
        readonly git_timestamp=$(TZ=UTC git show --quiet --date='format-local:%Y%m%d%H%M%S' --format="%cd")
        readonly slug=${version}-${git_timestamp}-${git_sha:0:16}
        echo "##[set-env name=VERSION_SLUG]${slug}"
      shell: bash
    - name: Start
      run: ./fats/start.sh
      shell: bash
      timeout-minutes: 15
    - name: Sideload images
      run: ./.github/workflows/acceptance-load-images.sh
      shell: bash
      timeout-minutes: 5
    - name: Install riff
      run: ./.github/workflows/acceptance-install.sh local
      shell: bash
      timeout-minutes: 15
    - name: Run tests
      run: ./.github/workflows/acceptance.sh
      shell: bash
      timeout-minutes: 30
    - name: Collect diagnostics
      run: ./fats/diagnostics.sh
      shell: bash
      if: always()
      timeout-minutes: 1
    - name: Uninstall riff
      run: ./.github/workflows/acceptance-cleanup.sh
      shell: bash
      if: always()
      timeout-minutes: 10
    - name: Cleanup
      run: ./fats/cleanup.sh
      shell: bash
      if: always()
      timeout-minutes: 10

  acceptance:
    name: Acceptance
    needs:
    - unit
    - stage
    if: success() && github.event_name == 'push'
    strategy:
      matrix:
        config:
        - qualifier: core
          os: windows-latest
          cluster: gke
          registry: gcr
          runtime: core
        - qualifier: knative
          os: ubuntu-latest
          cluster: kind
          registry: dockerhub
          runtime: knative
        - qualifier: streaming-inmemory
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: streaming
          gateway: inmemory
        - qualifier: streaming-kafka
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: streaming
          gateway: kafka
        - qualifier: streaming-pulsar
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: streaming
          gateway: pulsar
      fail-fast: false
    runs-on: ${{ matrix.config.os }}
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
      TOOLSMITH_ENV: ${{ secrets.TOOLSMITH_ENV }}
      PIVNET_REFRESH_TOKEN: ${{ secrets.PIVNET_REFRESH_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup env
      run: |
        job=$(date +%s) # TODO use something that is assigned by CI to guarantee uniqueness
        echo "JOB_ID=${job}"

        echo "##[set-env name=CLUSTER]${{ matrix.config.cluster }}"
        echo "##[set-env name=REGISTRY]${{ matrix.config.registry }}"
        echo "##[set-env name=CLUSTER_NAME]release-${job}-${{ matrix.config.qualifier }}"
        echo "##[set-env name=NAMESPACE]release-${job}-${{ matrix.config.qualifier }}"
        echo "##[set-env name=RUNTIME]${{ matrix.config.runtime }}"
        echo "##[set-env name=GATEWAY]${{ matrix.config.gateway }}"

        readonly version=$(cat VERSION)
        readonly git_sha=$(git rev-parse HEAD)
        readonly git_timestamp=$(TZ=UTC git show --quiet --date='format-local:%Y%m%d%H%M%S' --format="%cd")
        readonly slug=${version}-${git_timestamp}-${git_sha:0:16}
        echo "##[set-env name=VERSION_SLUG]${slug}"
      shell: bash
    - name: Install tools
      run: |
        ./fats/install.sh riff builds/v${VERSION_SLUG}
      shell: bash
    - name: Start
      run: ./fats/start.sh
      shell: bash
      timeout-minutes: 15
    - name: Install riff
      run: ./.github/workflows/acceptance-install.sh staged
      shell: bash
      timeout-minutes: 15
    - name: Run tests
      run: ./.github/workflows/acceptance.sh
      shell: bash
      timeout-minutes: 30
    - name: Collect diagnostics
      run: ./fats/diagnostics.sh
      shell: bash
      if: always()
      timeout-minutes: 1
    - name: Uninstall riff
      run: ./.github/workflows/acceptance-cleanup.sh
      shell: bash
      if: always()
      timeout-minutes: 10
    - name: Cleanup
      run: ./fats/cleanup.sh
      shell: bash
      if: always()
      timeout-minutes: 10

  publish:
    name: Publish
    needs: acceptance
    # TODO(scothis) remove publishing from mono branch
    if: |
      success() && github.event_name == 'push' && startsWith(github.repository, 'projectriff/') && (
        github.ref == 'refs/heads/mono' ||
        github.ref == 'refs/heads/master' || (
          startsWith(github.ref, 'refs/heads/v') && endsWith(github.ref, 'x')
        )
      )
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: GCP login
      run: ./fats/install.sh gcloud
      env:
        GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
    - name: Docker Hub login
      run: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
      shell: bash
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Publish
      run: ./.github/workflows/publish.sh
